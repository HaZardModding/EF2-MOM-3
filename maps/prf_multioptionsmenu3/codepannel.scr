//This script contains the code for the codepannel, use as you please
//This script contains the code for the codepannel, use as you please
//This script contains the code for the codepannel, use as you please


//Global Variables, can be accessed by all Functions/scriptfiles
//if definied outside a function, just like this
////////////////////////////////////////////////////////////////////////////////
float 	float_codepanelLastUsed;
string	string_codepanelCurrentNumber;

//declaration
////////////////////////////////////////////////////////////////////////////////
void	codepanel_noMenu();
void	codepanel();
void	codepanel_One();
void	codepanel_Two();
void	codepanel_Three();
void	codepanel_Four();
void	codepanel_Five();
void	codepanel_Six();
void	codepanel_Seven();
void	codepanel_Eight();
void	codepanel_Nine();
void	codepanel_Zero();

void codepanel_noMenu()
{
	entity ePlayer;
	ePlayer = mom_returnPlayerForTrigger(getCurrentEntity());
	mom_showMessagePlayer(ePlayer,"It seams you don't have the Menu for this Code pannel...");
}


void codepanel()
//this function is started once the trigger is used
{
//create internal variables, used only inside this function
	float	fCodeLength,
			fcodepanelLastUsed,
			fCombinationIndex;
	string	sCode,
			sCodeCombo,
			sTargetname;
			
	entity	eTrigger,ePlayer,eRelay;
	eTrigger = getCurrentEntity();
	if(doesEntityExist(eTrigger))
	{
		ePlayer = eTrigger.getLastActivatingEntity();
	}
	
	sCodeCombo	= "";
	sCode		= eTrigger.getStringVar("uservar3");
	fCodeLength	= eTrigger.getFloatVar("uservar4");
	sTargetname	= eTrigger.getRawTargetname();
	
//set equal here, below it will respond to change
	fcodepanelLastUsed		= float_codepanelLastUsed;
	
//repeat this procedure the whole time
	while(1)
	{
	//check if a function has been called since the last time
		if(float_codepanelLastUsed != fcodepanelLastUsed)
		{
		//set next index number
			fCombinationIndex++;
			
		//remember the last time a function has been used
			fcodepanelLastUsed = float_codepanelLastUsed;
		//combine entered code
			sCodeCombo = (sCodeCombo + string_codepanelCurrentNumber);		
			
		//once all numbers have been entred,
		//check if the combination is correct
			if(fCombinationIndex == fCodeLength)
			{
			//remove the Menu from the player again
				thread mom_exitMenuPlayer(ePlayer);
				
			//needed to run success/fail thread
				eRelay = spawn("trigger_relay");
				mom_waitOneFrame();
				eRelay.origin(eTrigger.getOrigin());
				eRelay.bind(eTrigger);				
				
			//compare code
				if(sCode == sCodeCombo)
				{
				//clear thread, so the code can no longer be entered
					eTrigger.thread("");
					
				//set success thread
					eRelay.thread(sTargetname+"_success");
				
				//let the player know whats happening
					mom_showMessagePlayer(ePlayer,"Code Accepted...");		

				//remove symbol
					eTrigger = getEntity(eTrigger.getRawTargetname()+"_symbol");
					if(doesEntityExist(eTrigger))
					{
						eTrigger.remove();
					}
				}
				else
				{
				//let the player know whats happening
					mom_showMessagePlayer(ePlayer,"Code INCORRECT!");
				//set fail thread
					eRelay.thread(sTargetname+"_fail");				
				}
				
				//start eigther success or fail thread
					mom_doActivate(eRelay,ePlayer);
					mom_waitOneFrame();
					eRelay.remove();
				
				//exit here
					return;
			}
		}
	//pause a moment or you will get a run away loop error
		wait(0.02);
	}
}

void codepanel_One()
//this function is called when option 1 is used
{
	float_codepanelLastUsed = getLevelTime();
	string_codepanelCurrentNumber="1";
	//centerprint("used one\n");
}
void codepanel_Two()
//this function is called when option 2 is used
{
	float_codepanelLastUsed = getLevelTime();
	string_codepanelCurrentNumber="2";
	//centerprint("used two\n");
}
void codepanel_Three()
//this function is called when option 3 is used
{
	float_codepanelLastUsed = getLevelTime();
	string_codepanelCurrentNumber="3";
	//centerprint("used three\n");
}
void codepanel_Four()
//this function is called when option 4 is used
{
	float_codepanelLastUsed = getLevelTime();
	string_codepanelCurrentNumber="4";
	//centerprint("used four\n");
}
void codepanel_Five()
//this function is called when option 5 is used
{
	float_codepanelLastUsed = getLevelTime();
	string_codepanelCurrentNumber="5";
	//centerprint("used five\n");
}
void codepanel_Six()
//this function is called when option 6 is used
{
	float_codepanelLastUsed = getLevelTime();
	string_codepanelCurrentNumber="6";
	//centerprint("used six\n");
}
void codepanel_Seven()
//this function is called when option 7 is used
{
	float_codepanelLastUsed = getLevelTime();
	string_codepanelCurrentNumber="7";
	//centerprint("used seven\n");
}
void codepanel_Eight()
//this function is called when option 8 is used
{
	float_codepanelLastUsed = getLevelTime();
	string_codepanelCurrentNumber="8";
	//centerprint("used eight\n");
}
void codepanel_Nine()
//this function is called when option 9 is used
{
	float_codepanelLastUsed = getLevelTime();
	string_codepanelCurrentNumber="9";
	//centerprint("used nine\n");
}
//this function is called when option 10 is used
void codepanel_Zero()
{
	float_codepanelLastUsed = getLevelTime();
	string_codepanelCurrentNumber="0";
	//centerprint("used zero\n");
}


